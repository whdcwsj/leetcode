#include<bits/stdc++.h>
using namespace std;


//要求时间复杂度是O(n)，空间复杂度是O(1)。
//只有异或运算可以
//暴力，哈希表达不到要求

//按位异或的符号：^

//两数相等异或结果为0，一个数与0异或结果就等于其本身。
//所以如果数组中只有一个出现一次的数，那么就只需要对所有的数进行异或就可以得到这个只出现一次的数

//分组要满足两个条件:
//1、两个相同的数必须出现在同一组
//将该两个相同的数分配在一组是很容易实现的。
//我们只需要固定一个二进制位，若这两个数在这个二进制位上的数是相同的。我们就把他分在同一组。

//2、那两个只出现一次的数必须分配在不同的组。这样我们分别对这两组数进行异或，就可以得到两个出现一次的数。
//【4,1,4,6】异或的结果为1和6异或的结果
//0111
//因为0111有三个二进制位都是1，分别是第一位、第二位、第三位。
//这就表示了1和6的二进制数在第一、二、三位上的数是不同的。我们假设就以第一个二进制位为划分标准。
//当数组中的数的第一个二进制位是1的就分为第一组。数组中的数第一个二进制位是0的就划分为第二组。

//而相同的数例如4，因为4和4的第一个二进制位是必然相等的，这样也就实现了将两个相同的数划分到同一组。
//最后只需要分别将这两个组进行异或，就可以得到我们要求的答案。

vector<int> singleNumbers(vector<int>& nums) {
    int res=0;
    //获取异或的结果
    for(int num:nums){
        res^=num;
    }
    //找到res中第几位上是1
    //初始0001
    int target=1;
    //当前位不为1，则左移
    while((target & res)==0){
        target=target<<1;
    }
    int a=0;
    int b=0;
    for(int num:nums){
        if((num & target)==0){
            a^=num;
        }else{
            b^=num;
        }
    }
    return vector<int>{a,b};
}


int main(){
    vector<int>nums = {1,2,10,4,1,4,3,3};
    vector<int>ans=singleNumbers(nums);
    for(auto&a:ans){
        cout<<a<<" ";
    }
    cout<<endl;

    system("pause");
    return 0;
}